import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class HTOATest {
    @Test
    public void putAndResizeAndGet(){
        //Linear Probing Tests
        HashTableOpenAddressing<Integer,Integer> h1=new HashTableOpenAddressing<>(1);
        for(int i=1;i<=100;i++){
            h1.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h1.size()/h1.capacity()< h1.getLoadFactor());
            assertEquals(i,h1.size());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h1.get(i));
        }
        //asserts that putting an already present key only changes the value

        h1.put(1,3);
        assertEquals(3, h1.get(1));
        //makes sure that there aren't 2 different "1" keys
        assertEquals("{0: ;1: 1=3,;2: 2=2,;3: 3=3,;4: 4=4,;5: 5=5,;6: 6=6,;7: 7=7,;8: 8=8,;9: 9=9,;10: 10=10,;11: 11=11,;12: 12=12,;13: 13=13,;14: 14=14,;15: 15=15,;16: 16=16,;17: 17=17,;18: 18=18,;19: 19=19,;20: 20=20,;21: 21=21,;22: 22=22,;23: 23=23,;24: 24=24,;25: 25=25,;26: 26=26,;27: 27=27,;28: 28=28,;29: 29=29,;30: 30=30,;31: 31=31,;32: 32=32,;33: 33=33,;34: 34=34,;35: 35=35,;36: 36=36,;37: 37=37,;38: 38=38,;39: 39=39,;40: 40=40,;41: 41=41,;42: 42=42,;43: 43=43,;44: 44=44,;45: 45=45,;46: 46=46,;47: 47=47,;48: 48=48,;49: 49=49,;50: 50=50,;51: 51=51,;52: 52=52,;53: 53=53,;54: 54=54,;55: 55=55,;56: 56=56,;57: 57=57,;58: 58=58,;59: 59=59,;60: 60=60,;61: 61=61,;62: 62=62,;63: 63=63,;64: 64=64,;65: 65=65,;66: 66=66,;67: 67=67,;68: 68=68,;69: 69=69,;70: 70=70,;71: 71=71,;72: 72=72,;73: 73=73,;74: 74=74,;75: 75=75,;76: 76=76,;77: 77=77,;78: 78=78,;79: 79=79,;80: 80=80,;81: 81=81,;82: 82=82,;83: 83=83,;84: 84=84,;85: 85=85,;86: 86=86,;87: 87=87,;88: 88=88,;89: 89=89,;90: 90=90,;91: 91=91,;92: 92=92,;93: 93=93,;94: 94=94,;95: 95=95,;96: 96=96,;97: 97=97,;98: 98=98,;99: 99=99,;100: 100=100,;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h1.toString());
        h1.put(5,10);
        assertEquals(10, h1.get(5));
        //makes sure that there aren't 2 different "5" keys
        assertEquals("{0: ;1: 1=3,;2: 2=2,;3: 3=3,;4: 4=4,;5: 5=10,;6: 6=6,;7: 7=7,;8: 8=8,;9: 9=9,;10: 10=10,;11: 11=11,;12: 12=12,;13: 13=13,;14: 14=14,;15: 15=15,;16: 16=16,;17: 17=17,;18: 18=18,;19: 19=19,;20: 20=20,;21: 21=21,;22: 22=22,;23: 23=23,;24: 24=24,;25: 25=25,;26: 26=26,;27: 27=27,;28: 28=28,;29: 29=29,;30: 30=30,;31: 31=31,;32: 32=32,;33: 33=33,;34: 34=34,;35: 35=35,;36: 36=36,;37: 37=37,;38: 38=38,;39: 39=39,;40: 40=40,;41: 41=41,;42: 42=42,;43: 43=43,;44: 44=44,;45: 45=45,;46: 46=46,;47: 47=47,;48: 48=48,;49: 49=49,;50: 50=50,;51: 51=51,;52: 52=52,;53: 53=53,;54: 54=54,;55: 55=55,;56: 56=56,;57: 57=57,;58: 58=58,;59: 59=59,;60: 60=60,;61: 61=61,;62: 62=62,;63: 63=63,;64: 64=64,;65: 65=65,;66: 66=66,;67: 67=67,;68: 68=68,;69: 69=69,;70: 70=70,;71: 71=71,;72: 72=72,;73: 73=73,;74: 74=74,;75: 75=75,;76: 76=76,;77: 77=77,;78: 78=78,;79: 79=79,;80: 80=80,;81: 81=81,;82: 82=82,;83: 83=83,;84: 84=84,;85: 85=85,;86: 86=86,;87: 87=87,;88: 88=88,;89: 89=89,;90: 90=90,;91: 91=91,;92: 92=92,;93: 93=93,;94: 94=94,;95: 95=95,;96: 96=96,;97: 97=97,;98: 98=98,;99: 99=99,;100: 100=100,;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h1.toString());

        //Quadratic Probing Tests
        HashTableOpenAddressing<Integer,Integer> h2=new HashTableOpenAddressing<>(2);
        for(int i=1;i<=100;i++){
            h2.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h2.size()/h2.capacity()< h2.getLoadFactor());
            assertEquals(i,h2.size());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h2.get(i));
        }
        //asserts that putting an already present key only changes the value

        h2.put(1,3);
        assertEquals(3, h2.get(1));
        //makes sure that there aren't 2 different "1" keys
        assertEquals("{0: ;1: 1=3,;2: 2=2,;3: 3=3,;4: 4=4,;5: 5=5,;6: 6=6,;7: 7=7,;8: 8=8,;9: 9=9,;10: 10=10,;11: 11=11,;12: 12=12,;13: 13=13,;14: 14=14,;15: 15=15,;16: 16=16,;17: 17=17,;18: 18=18,;19: 19=19,;20: 20=20,;21: 21=21,;22: 22=22,;23: 23=23,;24: 24=24,;25: 25=25,;26: 26=26,;27: 27=27,;28: 28=28,;29: 29=29,;30: 30=30,;31: 31=31,;32: 32=32,;33: 33=33,;34: 34=34,;35: 35=35,;36: 36=36,;37: 37=37,;38: 38=38,;39: 39=39,;40: 40=40,;41: 41=41,;42: 42=42,;43: 43=43,;44: 44=44,;45: 45=45,;46: 46=46,;47: 47=47,;48: 48=48,;49: 49=49,;50: 50=50,;51: 51=51,;52: 52=52,;53: 53=53,;54: 54=54,;55: 55=55,;56: 56=56,;57: 57=57,;58: 58=58,;59: 59=59,;60: 60=60,;61: 61=61,;62: 62=62,;63: 63=63,;64: 64=64,;65: 65=65,;66: 66=66,;67: 67=67,;68: 68=68,;69: 69=69,;70: 70=70,;71: 71=71,;72: 72=72,;73: 73=73,;74: 74=74,;75: 75=75,;76: 76=76,;77: 77=77,;78: 78=78,;79: 79=79,;80: 80=80,;81: 81=81,;82: 82=82,;83: 83=83,;84: 84=84,;85: 85=85,;86: 86=86,;87: 87=87,;88: 88=88,;89: 89=89,;90: 90=90,;91: 91=91,;92: 92=92,;93: 93=93,;94: 94=94,;95: 95=95,;96: 96=96,;97: 97=97,;98: 98=98,;99: 99=99,;100: 100=100,;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h2.toString());
        h2.put(5,10);
        assertEquals(10, h2.get(5));
        //makes sure that there aren't 2 different "5" keys
        assertEquals("{0: ;1: 1=3,;2: 2=2,;3: 3=3,;4: 4=4,;5: 5=10,;6: 6=6,;7: 7=7,;8: 8=8,;9: 9=9,;10: 10=10,;11: 11=11,;12: 12=12,;13: 13=13,;14: 14=14,;15: 15=15,;16: 16=16,;17: 17=17,;18: 18=18,;19: 19=19,;20: 20=20,;21: 21=21,;22: 22=22,;23: 23=23,;24: 24=24,;25: 25=25,;26: 26=26,;27: 27=27,;28: 28=28,;29: 29=29,;30: 30=30,;31: 31=31,;32: 32=32,;33: 33=33,;34: 34=34,;35: 35=35,;36: 36=36,;37: 37=37,;38: 38=38,;39: 39=39,;40: 40=40,;41: 41=41,;42: 42=42,;43: 43=43,;44: 44=44,;45: 45=45,;46: 46=46,;47: 47=47,;48: 48=48,;49: 49=49,;50: 50=50,;51: 51=51,;52: 52=52,;53: 53=53,;54: 54=54,;55: 55=55,;56: 56=56,;57: 57=57,;58: 58=58,;59: 59=59,;60: 60=60,;61: 61=61,;62: 62=62,;63: 63=63,;64: 64=64,;65: 65=65,;66: 66=66,;67: 67=67,;68: 68=68,;69: 69=69,;70: 70=70,;71: 71=71,;72: 72=72,;73: 73=73,;74: 74=74,;75: 75=75,;76: 76=76,;77: 77=77,;78: 78=78,;79: 79=79,;80: 80=80,;81: 81=81,;82: 82=82,;83: 83=83,;84: 84=84,;85: 85=85,;86: 86=86,;87: 87=87,;88: 88=88,;89: 89=89,;90: 90=90,;91: 91=91,;92: 92=92,;93: 93=93,;94: 94=94,;95: 95=95,;96: 96=96,;97: 97=97,;98: 98=98,;99: 99=99,;100: 100=100,;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h2.toString());

        //Double Hashing Tests
        HashTableOpenAddressing<Integer,Integer> h3=new HashTableOpenAddressing<>(3);
        for(int i=1;i<=100;i++){
            h3.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h3.size()/h3.capacity()< h3.getLoadFactor());
            assertEquals(i,h3.size());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h3.get(i));
        }
        //asserts that putting an already present key only changes the value

        h3.put(1,3);
        assertEquals(3, h3.get(1));
        //makes sure that there aren't 2 different "1" keys
        assertEquals("{0: ;1: 1=3,;2: 2=2,;3: 3=3,;4: 4=4,;5: 5=5,;6: 6=6,;7: 7=7,;8: 8=8,;9: 9=9,;10: 10=10,;11: 11=11,;12: 12=12,;13: 13=13,;14: 14=14,;15: 15=15,;16: 16=16,;17: 17=17,;18: 18=18,;19: 19=19,;20: 20=20,;21: 21=21,;22: 22=22,;23: 23=23,;24: 24=24,;25: 25=25,;26: 26=26,;27: 27=27,;28: 28=28,;29: 29=29,;30: 30=30,;31: 31=31,;32: 32=32,;33: 33=33,;34: 34=34,;35: 35=35,;36: 36=36,;37: 37=37,;38: 38=38,;39: 39=39,;40: 40=40,;41: 41=41,;42: 42=42,;43: 43=43,;44: 44=44,;45: 45=45,;46: 46=46,;47: 47=47,;48: 48=48,;49: 49=49,;50: 50=50,;51: 51=51,;52: 52=52,;53: 53=53,;54: 54=54,;55: 55=55,;56: 56=56,;57: 57=57,;58: 58=58,;59: 59=59,;60: 60=60,;61: 61=61,;62: 62=62,;63: 63=63,;64: 64=64,;65: 65=65,;66: 66=66,;67: 67=67,;68: 68=68,;69: 69=69,;70: 70=70,;71: 71=71,;72: 72=72,;73: 73=73,;74: 74=74,;75: 75=75,;76: 76=76,;77: 77=77,;78: 78=78,;79: 79=79,;80: 80=80,;81: 81=81,;82: 82=82,;83: 83=83,;84: 84=84,;85: 85=85,;86: 86=86,;87: 87=87,;88: 88=88,;89: 89=89,;90: 90=90,;91: 91=91,;92: 92=92,;93: 93=93,;94: 94=94,;95: 95=95,;96: 96=96,;97: 97=97,;98: 98=98,;99: 99=99,;100: 100=100,;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h3.toString());

        h3.put(5,10);
        assertEquals(10, h3.get(5));
        //makes sure that there aren't 2 different "5" keys
        assertEquals("{0: ;1: 1=3,;2: 2=2,;3: 3=3,;4: 4=4,;5: 5=10,;6: 6=6,;7: 7=7,;8: 8=8,;9: 9=9,;10: 10=10,;11: 11=11,;12: 12=12,;13: 13=13,;14: 14=14,;15: 15=15,;16: 16=16,;17: 17=17,;18: 18=18,;19: 19=19,;20: 20=20,;21: 21=21,;22: 22=22,;23: 23=23,;24: 24=24,;25: 25=25,;26: 26=26,;27: 27=27,;28: 28=28,;29: 29=29,;30: 30=30,;31: 31=31,;32: 32=32,;33: 33=33,;34: 34=34,;35: 35=35,;36: 36=36,;37: 37=37,;38: 38=38,;39: 39=39,;40: 40=40,;41: 41=41,;42: 42=42,;43: 43=43,;44: 44=44,;45: 45=45,;46: 46=46,;47: 47=47,;48: 48=48,;49: 49=49,;50: 50=50,;51: 51=51,;52: 52=52,;53: 53=53,;54: 54=54,;55: 55=55,;56: 56=56,;57: 57=57,;58: 58=58,;59: 59=59,;60: 60=60,;61: 61=61,;62: 62=62,;63: 63=63,;64: 64=64,;65: 65=65,;66: 66=66,;67: 67=67,;68: 68=68,;69: 69=69,;70: 70=70,;71: 71=71,;72: 72=72,;73: 73=73,;74: 74=74,;75: 75=75,;76: 76=76,;77: 77=77,;78: 78=78,;79: 79=79,;80: 80=80,;81: 81=81,;82: 82=82,;83: 83=83,;84: 84=84,;85: 85=85,;86: 86=86,;87: 87=87,;88: 88=88,;89: 89=89,;90: 90=90,;91: 91=91,;92: 92=92,;93: 93=93,;94: 94=94,;95: 95=95,;96: 96=96,;97: 97=97,;98: 98=98,;99: 99=99,;100: 100=100,;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h3.toString());

    }

    @Test
    public void remove(){
        //Linear Probing Tests
        HashTableOpenAddressing<Integer,Integer> h1=new HashTableOpenAddressing<>(1);
        for(int i=1;i<=100;i++){
            h1.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h1.size()/h1.capacity()< h1.getLoadFactor());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h1.get(i));
        }
        //asserts that removed values are not there anymore
        for(int i=1;i<=100;i++){
            h1.remove(i);
            assertNull(h1.get(i));
        }
        //asserts that there is nothing in the HashTable
        assertEquals("{0: ;1: ;2: ;3: ;4: ;5: ;6: ;7: ;8: ;9: ;10: ;11: ;12: ;13: ;14: ;15: ;16: ;17: ;18: ;19: ;20: ;21: ;22: ;23: ;24: ;25: ;26: ;27: ;28: ;29: ;30: ;31: ;32: ;33: ;34: ;35: ;36: ;37: ;38: ;39: ;40: ;41: ;42: ;43: ;44: ;45: ;46: ;47: ;48: ;49: ;50: ;51: ;52: ;53: ;54: ;55: ;56: ;57: ;58: ;59: ;60: ;61: ;62: ;63: ;64: ;65: ;66: ;67: ;68: ;69: ;70: ;71: ;72: ;73: ;74: ;75: ;76: ;77: ;78: ;79: ;80: ;81: ;82: ;83: ;84: ;85: ;86: ;87: ;88: ;89: ;90: ;91: ;92: ;93: ;94: ;95: ;96: ;97: ;98: ;99: ;100: ;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h1.toString());

        //Quadratic Probing Tests
        HashTableOpenAddressing<Integer,Integer> h2=new HashTableOpenAddressing<>(2);
        for(int i=1;i<=100;i++){
            h2.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h2.size()/h2.capacity()< h2.getLoadFactor());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h2.get(i));
        }
        //asserts that removed values are not there anymore
        for(int i=1;i<=100;i++){
            h2.remove(i);
            assertNull(h2.get(i));
        }
        //asserts that there is nothing in the HashTable
        assertEquals("{0: ;1: ;2: ;3: ;4: ;5: ;6: ;7: ;8: ;9: ;10: ;11: ;12: ;13: ;14: ;15: ;16: ;17: ;18: ;19: ;20: ;21: ;22: ;23: ;24: ;25: ;26: ;27: ;28: ;29: ;30: ;31: ;32: ;33: ;34: ;35: ;36: ;37: ;38: ;39: ;40: ;41: ;42: ;43: ;44: ;45: ;46: ;47: ;48: ;49: ;50: ;51: ;52: ;53: ;54: ;55: ;56: ;57: ;58: ;59: ;60: ;61: ;62: ;63: ;64: ;65: ;66: ;67: ;68: ;69: ;70: ;71: ;72: ;73: ;74: ;75: ;76: ;77: ;78: ;79: ;80: ;81: ;82: ;83: ;84: ;85: ;86: ;87: ;88: ;89: ;90: ;91: ;92: ;93: ;94: ;95: ;96: ;97: ;98: ;99: ;100: ;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h2.toString());

        //Double Hashing Tests
        HashTableOpenAddressing<Integer,Integer> h3=new HashTableOpenAddressing<>(2);
        for(int i=1;i<=100;i++){
            h3.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h3.size()/h3.capacity()< h3.getLoadFactor());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h3.get(i));
        }
        //asserts that removed values are not there anymore
        for(int i=1;i<=100;i++){
            h3.remove(i);
            assertNull(h3.get(i));
        }
        //asserts that there is nothing in the HashTable
        assertEquals("{0: ;1: ;2: ;3: ;4: ;5: ;6: ;7: ;8: ;9: ;10: ;11: ;12: ;13: ;14: ;15: ;16: ;17: ;18: ;19: ;20: ;21: ;22: ;23: ;24: ;25: ;26: ;27: ;28: ;29: ;30: ;31: ;32: ;33: ;34: ;35: ;36: ;37: ;38: ;39: ;40: ;41: ;42: ;43: ;44: ;45: ;46: ;47: ;48: ;49: ;50: ;51: ;52: ;53: ;54: ;55: ;56: ;57: ;58: ;59: ;60: ;61: ;62: ;63: ;64: ;65: ;66: ;67: ;68: ;69: ;70: ;71: ;72: ;73: ;74: ;75: ;76: ;77: ;78: ;79: ;80: ;81: ;82: ;83: ;84: ;85: ;86: ;87: ;88: ;89: ;90: ;91: ;92: ;93: ;94: ;95: ;96: ;97: ;98: ;99: ;100: ;101: ;102: ;103: ;104: ;105: ;106: ;107: ;108: ;109: ;110: ;111: ;112: ;113: ;114: ;115: ;116: ;117: ;118: ;119: ;120: ;121: ;122: ;123: ;124: ;125: ;126: ;127: ;128: ;129: ;130: ;131: ;132: ;133: ;134: ;135: ;136: ;137: ;138: ;139: ;140: ;141: ;142: ;143: ;144: ;145: ;146: ;147: ;148: ;149: ;150: ;151: ;152: ;153: ;154: ;155: ;156: ;157: ;158: ;159: ;160: ;161: ;162: ;163: ;164: ;165: ;166: ;167: ;168: ;169: ;170: ;171: ;172: ;173: ;174: ;175: ;176: ;177: ;178: ;179: ;180: ;181: ;182: ;183: ;184: ;185: ;186: ;187: ;188: ;189: ;190: ;191: ;192: ;193: ;194: ;195: ;196:}",h3.toString());
    }

    @Test
    public void containsKey(){
        HashTableOpenAddressing<Integer,Integer> h1=new HashTableOpenAddressing<>(1);
        for(int i=1;i<=100;i++){
            h1.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h1.size()/h1.capacity()< h1.getLoadFactor());
            assertEquals(i,h1.size());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h1.get(i));
        }
        //makes sure the key is contained in the HashTable
        for(int i=1;i<=100;i++){
            assertTrue(h1.containsKey(i));
        }
        //Makes sure no unadded keys return true
        for(int i=101;i<=200;i++){
            assertEquals(false,h1.containsKey(i));
        }


        HashTableOpenAddressing<Integer,Integer> h2=new HashTableOpenAddressing<>(2);
        for(int i=1;i<=100;i++){
            h2.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h2.size()/h2.capacity()< h2.getLoadFactor());
            assertEquals(i,h2.size());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h2.get(i));
        }
        //makes sure the key is contained in the HashTable
        for(int i=1;i<=100;i++){
            assertTrue(h2.containsKey(i));
        }
        //Makes sure no unadded keys return true
        for(int i=101;i<=200;i++){
            assertEquals(false,h2.containsKey(i));
        }


        HashTableOpenAddressing<Integer,Integer> h3=new HashTableOpenAddressing<>(3);
        for(int i=1;i<=100;i++){
            h3.put(i,i);
            //makes sure resizing/rehashing works
            assertTrue(1.0*h3.size()/h3.capacity()< h3.getLoadFactor());
            assertEquals(i,h3.size());
        }
        for(int i=1;i<=100;i++) {
            assertEquals(i,h3.get(i));
        }
        //makes sure the key is contained in the HashTable
        for(int i=1;i<=100;i++){
            assertTrue(h3.containsKey(i));
        }
        //Makes sure no unadded keys return true
        for(int i=101;i<=200;i++){
            assertEquals(false,h3.containsKey(i));
        }
    }
}
